{"version":3,"sources":["components/Contador.jsx","App.js","reportWebVitals.js","index.js"],"names":["Contador","arguments","length","undefined","_useState","useState","_useState2","Object","slicedToArray","contador","setContador","react_default","a","createElement","className","onClick","App","Contador_Contador","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"mMAGaA,EAAW,WAAiBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,OAAAG,EAENC,mBAAoB,GAFdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEhCK,EAFgCH,EAAA,GAEtBI,EAFsBJ,EAAA,GAgBvC,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQE,QAZI,WAClBL,EAAYD,EAAW,KAWjB,OACAE,EAAAC,EAAAC,cAAA,sBAAeJ,EAAf,KACAE,EAAAC,EAAAC,cAAA,UAAQE,QAVI,WAClBL,EAXmD,KAoB7C,WACAC,EAAAC,EAAAC,cAAA,UAAQE,QAnBG,WACjBL,EAAYD,EAAW,KAkBjB,UCdKO,MARf,WACE,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACI,EAAD,QCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHxB,EAAAC,EAAAC,cAACF,EAAAC,EAAMwB,WAAP,KACEzB,EAAAC,EAAAC,cAACwB,EAAD,QAOJnB","file":"static/js/main.5e0aeedd.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\n\r\nexport const Contador = (initial = 0) => {\r\n\r\n  const [contador, setContador ] = useState( initial = 0)\r\n\r\n  const handleSuma = () => {\r\n    setContador(contador + 1)\r\n  }\r\n\r\n  const handleResta = () => {\r\n    setContador(contador - 1)\r\n  }\r\n\r\n  const handleReset = () => {\r\n    setContador( initial )\r\n  }\r\n\r\n  return (\r\n    <div className='container'>\r\n        <h2>Contador</h2>\r\n        <div className='box'>\r\n          <button onClick={ handleResta }> - </button>\r\n          <p>Clikeaste { contador } </p>\r\n          <button onClick={ handleReset }> Reset </button>\r\n          <button onClick={ handleSuma }> + </button>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\nimport './App.css';\nimport { Contador } from './components/Contador';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Contador />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}